// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package internal

import (
	"github.com/google/wire"
	"github.com/pna/order-app-backend/internal/bean/implement"
	"github.com/pna/order-app-backend/internal/controller"
	"github.com/pna/order-app-backend/internal/controller/http"
	"github.com/pna/order-app-backend/internal/controller/http/middleware"
	"github.com/pna/order-app-backend/internal/controller/http/v1"
	"github.com/pna/order-app-backend/internal/database"
	"github.com/pna/order-app-backend/internal/repository/implement"
	"github.com/pna/order-app-backend/internal/service/implement"
)

// Injectors from wire.go:

func InitializeContainer(db database.Db) *controller.ApiContainer {
	healthHandler := v1.NewHealthHandler(db)
	helloWorldRepository := repositoryimplement.NewHelloWorldRepository(db)
	passwordEncoder := beanimplement.NewBcryptPasswordEncoder()
	helloWorldService := serviceimplement.NewHelloWorldService(helloWorldRepository, passwordEncoder)
	helloWorldHandler := v1.NewHelloWorldHandler(helloWorldService)
	authMiddleware := middleware.NewAuthMiddleware()
	userRepository := repositoryimplement.NewUserRepository(db)
	userService := serviceimplement.NewUserService(userRepository, passwordEncoder)
	userHandler := v1.NewUserHandler(userService)
	productRepository := repositoryimplement.NewProductRepository(db)
	inventoryRepository := repositoryimplement.NewInventoryRepository(db)
	unitOfWork := repositoryimplement.NewUnitOfWork(db)
	productService := serviceimplement.NewProductService(productRepository, inventoryRepository, unitOfWork)
	productHandler := v1.NewProductHandler(productService)
	inventoryHistoryRepository := repositoryimplement.NewInventoryHistoryRepository(db)
	inventoryService := serviceimplement.NewInventoryService(inventoryRepository, inventoryHistoryRepository, userRepository, unitOfWork)
	inventoryHandler := v1.NewInventoryHandler(inventoryService)
	inventoryHistoryService := serviceimplement.NewInventoryHistoryService(inventoryHistoryRepository)
	inventoryHistoryHandler := v1.NewInventoryHistoryHandler(inventoryHistoryService)
	customerRepository := repositoryimplement.NewCustomerRepository(db)
	customerService := serviceimplement.NewCustomerService(customerRepository, unitOfWork)
	customerHandler := v1.NewCustomerHandler(customerService)
	server := http.NewServer(healthHandler, helloWorldHandler, authMiddleware, userHandler, productHandler, inventoryHandler, inventoryHistoryHandler, customerHandler)
	apiContainer := controller.NewApiContainer(server)
	return apiContainer
}

// wire.go:

var container = wire.NewSet(controller.NewApiContainer)

// may have grpc server in the future
var serverSet = wire.NewSet(http.NewServer)

// handler === controller | with service and repository layers to form 3 layers architecture
var handlerSet = wire.NewSet(v1.NewHealthHandler, v1.NewHelloWorldHandler, v1.NewUserHandler, v1.NewProductHandler, v1.NewInventoryHandler, v1.NewInventoryHistoryHandler, v1.NewCustomerHandler)

var serviceSet = wire.NewSet(serviceimplement.NewHelloWorldService, serviceimplement.NewUserService, serviceimplement.NewProductService, serviceimplement.NewInventoryService, serviceimplement.NewInventoryHistoryService, serviceimplement.NewCustomerService)

var repositorySet = wire.NewSet(repositoryimplement.NewHelloWorldRepository, repositoryimplement.NewUserRepository, repositoryimplement.NewProductRepository, repositoryimplement.NewInventoryRepository, repositoryimplement.NewInventoryHistoryRepository, repositoryimplement.NewUnitOfWork, repositoryimplement.NewCustomerRepository)

var middlewareSet = wire.NewSet(middleware.NewAuthMiddleware)

var beanSet = wire.NewSet(beanimplement.NewBcryptPasswordEncoder)
